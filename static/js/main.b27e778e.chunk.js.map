{"version":3,"sources":["components/Display/Display.module.css","components/Changer/Changer.module.css","components/CounterSettings/CounterSettings.module.css","components/Counter/Counter.module.css","components/CounterWithParams/CounterWithParams.module.css","components/Button/Button.module.css","components/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/Changer/Changer.tsx","components/CounterSettings/CounterSettings.tsx","components/CounterWithParams/CounterWithParams.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","displayValue","text","addClassName","s","textOK","error","textError","counterValue","toString","counterOK","counterFinish","className","display","Button","button","disabled","onClick","callback","name","Counter","main","counter","maxValue","buttons","setCounterValue","minValue","Changer","input","type","value","onChange","e","changeValue","currentTarget","valueAsNumber","CounterSettings","useState","buttonDisabled","setButtonDisabled","minError","setMinError","maxError","setMaxError","checkError","makeMessage","changers","setNewMaxValue","setNewMinValue","setButtonPressed","MIN_VALUE_NAME","MAX_VALUE_NAME","CounterWithParams","setCounter","setMinValue","setMaxValue","setText","setError","useEffect","minString","localStorage","getItem","maxString","minNumber","JSON","parse","maxNumber","setItem","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b27e778e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2tMqQ\",\"counterOK\":\"Display_counterOK__oh4WL\",\"counterFinish\":\"Display_counterFinish__823N7\",\"textOK\":\"Display_textOK__1ZNKX\",\"textError\":\"Display_textError__2AkCl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Changer_main__2giff\",\"name\":\"Changer_name__2uJKh\",\"input\":\"Changer_input__1u77M\",\"error\":\"Changer_error__3jKR1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"CounterSettings_main__32TVI\",\"changers\":\"CounterSettings_changers__3hC1_\",\"buttons\":\"CounterSettings_buttons__3JWZ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Counter_main__GgNRR\",\"buttons\":\"Counter_buttons__1bQDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"CounterWithParams_main__z9vwY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__uPfkH\"};","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    counterValue: number\r\n    text: string\r\n    error: boolean\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    let displayValue = props.text\r\n    let addClassName = s.textOK\r\n\r\n    if (props.text) {\r\n        if (props.error) {\r\n            addClassName += ' ' + s.textError\r\n        }\r\n    } else {\r\n        displayValue = props.counterValue.toString()\r\n        addClassName = s.counterOK\r\n        if (props.error) {\r\n            addClassName = s.counterFinish\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.display + ' ' + addClassName}>\r\n            {displayValue}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    disabled: boolean\r\n    callback: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={s.button}\r\n            disabled={props.disabled}\r\n            onClick={onClickHandler}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Counter.module.css'\r\nimport {Display} from '../Display/Display';\r\nimport {Button} from '../Button/Button';\r\n\r\ntype CounterPropsType = {\r\n    counter: number\r\n    minValue: number\r\n    maxValue: number\r\n    text: string\r\n    error: boolean\r\n    setCounterValue: (value: number) => void\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n    const increment = () => {\r\n        if (props.counter < props.maxValue) {\r\n            props.setCounterValue(props.counter + 1)\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        props.setCounterValue(props.minValue)\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n\r\n            <Display\r\n                counterValue={props.counter}\r\n                text={props.text}\r\n                error={ !!props.text ? props.error : props.counter >= props.maxValue}\r\n            />\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'Inc'}\r\n                    disabled={!!props.text || props.counter >= props.maxValue}\r\n                    callback={increment}\r\n                />\r\n\r\n                <Button\r\n                    name={'Reset'}\r\n                    disabled={!!props.text || props.counter === props.minValue}\r\n                    callback={reset}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { ChangeEvent } from 'react';\r\nimport s from './Changer.module.css'\r\n\r\ntype ChangerPropsType = {\r\n    text: string\r\n    value: number\r\n    changeValue: (value: number) => void\r\n    error: boolean\r\n}\r\n\r\nexport const Changer = (props: ChangerPropsType) => {\r\n    const onChangeValue = (e:ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.name}>\r\n                {props.text}\r\n            </div>\r\n            <input\r\n                className={`${s.input}  ${props.error ? s.error : ''}`}\r\n                type={'number'}\r\n                value={props.value}\r\n                onChange={onChangeValue}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport s from './CounterSettings.module.css';\r\nimport {Button} from '../Button/Button';\r\nimport {Changer} from '../Changer/Changer';\r\n\r\ntype CounterSettingsPropsType = {\r\n    makeMessage: (text: string, error: boolean) => void\r\n    minValue: number\r\n    maxValue: number\r\n    setNewMinValue: (value: number) => void\r\n    setNewMaxValue: (value: number) => void\r\n    setButtonPressed: () => void\r\n}\r\n\r\nexport const CounterSettings = (props: CounterSettingsPropsType) => {\r\n    const [buttonDisabled, setButtonDisabled] = useState<boolean>(true)\r\n    const [minError, setMinError] = useState<boolean>(false)\r\n    const [maxError, setMaxError] = useState<boolean>(false)\r\n\r\n    const checkError = (minValue: number, maxValue: number) => {\r\n        const minError = minValue < 0 || minValue >= maxValue\r\n        const maxError = maxValue < 0 || maxValue <= minValue\r\n       setMinError(minError)\r\n       setMaxError(maxError)\r\n\r\n        const error = minError || maxError\r\n        setButtonDisabled(error)\r\n        if (error) {\r\n            props.makeMessage('Incorrect value!', true)\r\n        } else {\r\n            props.makeMessage(`EnterValues and press 'Set'`, false)\r\n        }\r\n    }\r\n\r\n    const changeMaxValue = (maxValue: number) => {\r\n        props.setNewMaxValue(maxValue)\r\n        checkError(props.minValue, maxValue)\r\n    }\r\n\r\n    const changeMinValue = (minValue: number) => {\r\n        props.setNewMinValue(minValue)\r\n        checkError(minValue, props.maxValue)\r\n    }\r\n\r\n    const setButtonPressed = () => {\r\n        setButtonDisabled(true)\r\n        props.setButtonPressed()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.main}>\r\n\r\n            <div className={s.changers}>\r\n                <Changer\r\n                    text={'max value:'}\r\n                    value={props.maxValue}\r\n                    changeValue={changeMaxValue}\r\n                    error={maxError}\r\n                />\r\n\r\n                <Changer\r\n                    text={'start value:'}\r\n                    value={props.minValue}\r\n                    changeValue={changeMinValue}\r\n                    error={minError}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'Set'}\r\n                    disabled={buttonDisabled}\r\n                    callback={setButtonPressed}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport s from './CounterWithParams.module.css'\r\nimport {Counter} from '../Counter/Counter';\r\nimport {CounterSettings} from '../CounterSettings/CounterSettings';\r\n\r\nconst INIT_MIN_VALUE = 0;\r\nconst INIT_MAX_VALUE = 5;\r\n\r\nconst MIN_VALUE_NAME = 'CounterMinValue'\r\nconst MAX_VALUE_NAME = 'CounterMaxValue'\r\n\r\nexport const CounterWithParams = () => {\r\n    const [counter, setCounter] = useState<number>(INIT_MIN_VALUE)\r\n    const [minValue, setMinValue] = useState<number>(INIT_MIN_VALUE)\r\n    const [maxValue, setMaxValue] = useState<number>(INIT_MAX_VALUE)\r\n    const [text, setText] = useState('')\r\n    const [error, setError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const minString = localStorage.getItem(MIN_VALUE_NAME)\r\n        const maxString = localStorage.getItem(MAX_VALUE_NAME)\r\n\r\n        if (minString && maxString) {\r\n            const minNumber = JSON.parse(minString)\r\n            const maxNumber = JSON.parse(maxString)\r\n\r\n            if (minNumber >= 0 && maxNumber > minNumber) {\r\n                setCounter(minNumber)\r\n                setMinValue(minNumber)\r\n                setMaxValue(maxNumber)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(MIN_VALUE_NAME, JSON.stringify(minValue))\r\n    }, [minValue])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(MAX_VALUE_NAME, JSON.stringify(maxValue))\r\n    }, [maxValue])\r\n\r\n\r\n    const setCounterValue = (value: number) => {\r\n        setCounter(value)\r\n    }\r\n\r\n    const makeMessage = (text: string, error: boolean) => {\r\n        setText(text)\r\n        setError(error)\r\n    }\r\n\r\n    const setNewMinValue = (value: number) => {\r\n        setMinValue(value)\r\n    }\r\n    const setNewMaxValue = (value: number) => {\r\n        setMaxValue(value)\r\n    }\r\n\r\n    const setButtonPressed = () => {\r\n        setCounter(minValue)\r\n        makeMessage('',false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <CounterSettings\r\n                makeMessage={makeMessage}\r\n                minValue={minValue}\r\n                maxValue={maxValue}\r\n                setNewMinValue={setNewMinValue}\r\n                setNewMaxValue={setNewMaxValue}\r\n                setButtonPressed={setButtonPressed}\r\n            />\r\n\r\n            <Counter\r\n                counter={counter}\r\n                minValue={minValue}\r\n                maxValue={maxValue}\r\n                setCounterValue={setCounterValue}\r\n                text={text}\r\n                error={error}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { CounterWithParams } from './components/CounterWithParams/CounterWithParams';\r\n\r\nfunction App() {\r\n    return <CounterWithParams/>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}